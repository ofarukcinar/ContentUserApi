version: '3.8'

services:
  contentservice:
    build:
      context: ./ContentApi
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:5000
      - ConnectionStrings__ContentDb=Host=contentdb;Database=ContentDb;Username=postgres;Password=postgres
    depends_on:
      contentdb:
        condition: service_healthy
    networks:
      - app-network

  userservice:
    build:
      context: ./UserApi
      dockerfile: Dockerfile
    ports:
      - "5002:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:5000
      - ConnectionStrings__UserDb=Host=userdb;Database=UserDb;Username=postgres;Password=postgres
    depends_on:
      userdb:
        condition: service_healthy
    networks:
      - app-network

  contentdb:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ContentDb
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  userdb:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: UserDb
    ports:
      - "5434:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge